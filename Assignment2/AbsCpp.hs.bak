-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsCpp where

newtype Id = Id String
  deriving (Eq, Ord, Show, Read)

data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Type TokenId [Arg] [Stm]
    | DUserFun TokenId TokenId [Arg] [Stm]
    | DUSing Exp
    | DType Type TokenId Type
  deriving (Eq, Ord, Show, Read)

data Arg
    = ADecl Type TokenId
    | ASingT Type [Type]
    | ASingR TokenId
    | AStreamR TokenId TokenId
    | AConstT Type TokenId
    | AConst Type TokenId
    | AConstR TokenId TokenId
    | AConstL TypeList TokenId
    | AConstLR TypeList TokenId
  deriving (Eq, Ord, Show, Read)

data Stm
    = STDef TypeDef
    | SExp Exp
    | SDecls Type [TokenId]
    | SDecls2 Exp [TokenId]
    | SConst Type [TokenId]
    | SInit Type [TokenId] Exp
    | SInit2 Exp [TokenId] Exp
    | SReturn Exp
    | SReturnVoid
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Exp
    = ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EString [String]
    | EId TokenId
    | EType Type
    | EApp TokenId [Exp]
    | EQConst Exp Exp
    | EInd Exp [Exp]
    | EPIncr Exp
    | EPDecr Exp
    | EDot Exp Exp
    | ENega Exp
    | EIncr Exp
    | EDecr Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | ECond Exp Exp Exp
    | EExcept Exp
    | ETyped Exp Type
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_bool | Type_int | Type_double | Type_void | Type_string
  deriving (Eq, Ord, Show, Read)

data TypeDef = TDef [Exp]
  deriving (Eq, Ord, Show, Read)

data TypeList = TList TokenId [Type]
  deriving (Eq, Ord, Show, Read)

data TokenId = TId TypeList | TId2 Id
  deriving (Eq, Ord, Show, Read)

