module SkelCpp where

-- Haskell module generated by the BNF converter

import AbsCpp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ tokenid args stms -> failure x
  DUserFun tokenid1 tokenid2 args stms -> failure x
  DUSing exp -> failure x
  DType type_1 tokenid type_2 -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADecl type_ tokenid -> failure x
  ASingT type_ types -> failure x
  ASingR tokenid -> failure x
  AStreamR tokenid1 tokenid2 -> failure x
  AConstT type_ tokenid -> failure x
  AConst type_ tokenid -> failure x
  AConstR tokenid1 tokenid2 -> failure x
  AConstL typelist tokenid -> failure x
  AConstLR typelist tokenid -> failure x
transStm :: Stm -> Result
transStm x = case x of
  STDef typedef -> failure x
  SExp exp -> failure x
  SDecls type_ tokenids -> failure x
  SDecls2 exp tokenids -> failure x
  SConst type_ tokenids -> failure x
  SInit type_ tokenids exp -> failure x
  SInit2 exp1 tokenids exp2 -> failure x
  SReturn exp -> failure x
  SReturnVoid -> failure x
  SWhile exp stm -> failure x
  SBlock stms -> failure x
  SIf exp stm -> failure x
  SIfElse exp stm1 stm2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ETrue -> failure x
  EFalse -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  EString strings -> failure x
  EId tokenid -> failure x
  EType type_ -> failure x
  EApp tokenid exps -> failure x
  EQConst exp1 exp2 -> failure x
  EInd exp exps -> failure x
  EPIncr exp -> failure x
  EPDecr exp -> failure x
  EDot exp1 exp2 -> failure x
  ENega exp -> failure x
  EIncr exp -> failure x
  EDecr exp -> failure x
  ETimes exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  ELShift exp1 exp2 -> failure x
  ERShift exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELtEq exp1 exp2 -> failure x
  EGtEq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  EAss exp1 exp2 -> failure x
  ECond exp1 exp2 exp3 -> failure x
  EExcept exp -> failure x
  ETyped exp type_ -> failure x
transType :: Type -> Result
transType x = case x of
  Type_bool -> failure x
  Type_int -> failure x
  Type_double -> failure x
  Type_void -> failure x
  Type_string -> failure x
transTypeDef :: TypeDef -> Result
transTypeDef x = case x of
  TDef exps tokenid -> failure x
transTypeList :: TypeList -> Result
transTypeList x = case x of
  TList tokenid types -> failure x
transTokenId :: TokenId -> Result
transTokenId x = case x of
  TId typelist -> failure x
  TId2 id -> failure x

